name: Build and Publish

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:

jobs:
  eslint:
    name: runner / eslint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: eslint
        uses: reviewdog/action-eslint@v1
        with:
          reporter: github-pr-review
          eslint_flags: 'src/'
  
  checkstyle_job:
    runs-on: ubuntu-latest
    name: Checkstyle job

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run check style
        uses: nikitasavinov/checkstyle-action@master
        with:
          level: warning
          checkstyle_config: 'vu_checks.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: 'github-pr-review'
          tool_name: 'testtool'
  
  build:
    runs-on: ubuntu-latest
    name: Build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Configure Maven settings
        env:
          M2_SETTINGS: ${{ secrets.M2_SETTINGS }}
        run: printf "$M2_SETTINGS" > ~/.m2/settings.xml

      - name: Configure NPM settings
        env:
          NPMRC: ${{ secrets.NPMRC }}
        run: printf "$NPMRC" > ~/.npmrc

      - name: Build application & docker image
        run: mvn spring-boot:build-image

      - name: Publish docker image
        env:
          DOCKER_REGISTRY: 'registry.intellective.com'
          DOCKER_USER: ${{ secrets.NEXUS_USER }}
          DOCKER_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: ./publish.sh

      - name: Update dev environment
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          repo: intellectivelab/devops-unity-origin-envs
          ref: refs/heads/master
          token: ${{ secrets.PAT }}
          inputs: '{ "sha": "${{ github.sha }}", "project": "Gateway" }'
